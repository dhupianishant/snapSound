{"ast":null,"code":"var _jsxFileName = \"E:\\\\snapSound\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageUploader = () => {\n  _s();\n  const [image, setImage] = useState(null);\n  const [base64Image, setBase64Image] = useState(\"\"); // Store base64 string\n  const [mood, setMood] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n\n  // Handle Image Upload and Convert to Base64\n  const handleImageUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setImage(URL.createObjectURL(file)); // Preview image\n\n      // Convert to base64\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = () => {\n        const base64String = reader.result.split(\",\")[1]; // Remove \"data:image/png;base64,\" part\n        setBase64Image(base64String);\n      };\n    }\n  };\n\n  // Send Image to Backend in Base64 Format\n  const analyzeImage = async () => {\n    if (!base64Image) {\n      alert(\"Please upload an image first!\");\n      return;\n    }\n    try {\n      const response = await fetch(\"http://localhost:5000/analyze-image\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          imageBytes: base64Image\n        }) // Send base64 string\n      });\n      const data = await response.json();\n      setMood(data.mood);\n      setSongs(data.songs);\n    } catch (error) {\n      console.error(\"Error analyzing image:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload an Image to Get a Song Recommendation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), image && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"Preview\",\n      style: {\n        width: \"200px\",\n        marginTop: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: analyzeImage,\n      children: \"Analyze Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), mood && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Mood Detected: \", mood]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recommended Songs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: songs.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: song.url,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: [song.name, \" by \", song.artist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploader, \"y4/XS3D393OVUpqvO7D/TOsRnQI=\");\n_c = ImageUploader;\nexport default ImageUploader;\nvar _c;\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ImageUploader","_s","image","setImage","base64Image","setBase64Image","mood","setMood","songs","setSongs","handleImageUpload","event","file","target","files","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","base64String","result","split","analyzeImage","alert","response","fetch","method","headers","body","JSON","stringify","imageBytes","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","src","alt","style","width","marginTop","onClick","map","song","index","href","url","rel","name","artist","_c","$RefreshReg$"],"sources":["E:/snapSound/frontend/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst ImageUploader = () => {\n  const [image, setImage] = useState(null);\n  const [base64Image, setBase64Image] = useState(\"\"); // Store base64 string\n  const [mood, setMood] = useState(\"\");\n  const [songs, setSongs] = useState([]);\n\n  // Handle Image Upload and Convert to Base64\n  const handleImageUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setImage(URL.createObjectURL(file)); // Preview image\n\n      // Convert to base64\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onloadend = () => {\n        const base64String = reader.result.split(\",\")[1]; // Remove \"data:image/png;base64,\" part\n        setBase64Image(base64String);\n      };\n    }\n  };\n\n  // Send Image to Backend in Base64 Format\n  const analyzeImage = async () => {\n    if (!base64Image) {\n      alert(\"Please upload an image first!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"http://localhost:5000/analyze-image\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ imageBytes: base64Image }), // Send base64 string\n      });\n\n      const data = await response.json();\n      setMood(data.mood);\n      setSongs(data.songs);\n    } catch (error) {\n      console.error(\"Error analyzing image:\", error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Upload an Image to Get a Song Recommendation</h2>\n      <input type=\"file\" onChange={handleImageUpload} />\n      {image && <img src={image} alt=\"Preview\" style={{ width: \"200px\", marginTop: \"10px\" }} />}\n      <button onClick={analyzeImage}>Analyze Image</button>\n\n      {mood && (\n        <div>\n          <h3>Mood Detected: {mood}</h3>\n          <h3>Recommended Songs:</h3>\n          <ul>\n            {songs.map((song, index) => (\n              <li key={index}>\n                <a href={song.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {song.name} by {song.artist}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImageUploader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}